// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model crime {
  report_number      BigInt?
  date_reported      String?
  date_of_occurrence String?
  time_of_occurrence String?
  city               String?
  crime_code         BigInt?
  crime_description  String?
  victim_age         BigInt?
  victim_gender      String?
  weapon_used        String?
  crime_domain       String?
  police_deployed    BigInt?
  case_closed        String?
  date_case_closed   String?
  lat                Float?
  long               Float?
  country            String?
  iso2               String?
  state              String?
  id                 Int     @id @default(autoincrement())
}

model Report {
  id          String   @id @default(cuid())
  title       String
  crimeType   String
  author      String
  description String
  location    String
  city        String
  date        String
  time        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  // mediaUrl   String?
  // location   Location @relation(fields: [locationId], references: [id])
  // locationId String
  // userId     String
  // user       User     @relation(fields: [userId], references: [id])
}

model Location {
  id        String  @id @default(cuid())
  city      String
  state     String?
  country   String?
  latitude  Float
  longitude Float
  // reports   Report[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int? // Note: Next-Auth typically uses Int for Unix timestamps
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  // reports       Report[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
